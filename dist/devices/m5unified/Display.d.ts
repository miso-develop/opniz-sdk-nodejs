export declare class Display {
    private opniz;
    FontType: {
        readonly ft_unknown: 1;
        readonly ft_glcd: 2;
        readonly ft_bmp: 3;
        readonly ft_rle: 4;
        readonly ft_gfx: 5;
        readonly ft_bdf: 6;
        readonly ft_vlw: 7;
        readonly ft_u8g2: 8;
        readonly ft_ttf: 9;
    };
    FontTypeList: {
        [key: number]: string;
    };
    TextDatumType: {
        readonly top_left: 0;
        readonly top_center: 1;
        readonly top_centre: 1;
        readonly top_right: 2;
        readonly middle_left: 4;
        readonly middle_center: 5;
        readonly middle_centre: 5;
        readonly middle_right: 6;
        readonly bottom_left: 8;
        readonly bottom_center: 9;
        readonly bottom_centre: 9;
        readonly bottom_right: 10;
        readonly baseline_left: 16;
        readonly baseline_center: 17;
        readonly baseline_centre: 17;
        readonly baseline_right: 18;
    };
    TextDatumTypeList: {
        [key: number]: string;
    };
    constructor(opniz: any);
    private _convertNumberColorcode;
    private _convertColor16;
    height(): Promise<number | undefined>;
    width(): Promise<number | undefined>;
    setRotation(rotation: number): Promise<boolean | undefined>;
    setCursor(x: number, y: number, font?: Display.FontType): Promise<boolean | undefined>;
    color332(r: number, g: number, b: number): Promise<number | undefined>;
    color565(r: number, g: number, b: number): Promise<number | undefined>;
    color888(r: number, g: number, b: number): Promise<number | undefined>;
    drawString(string: string, x: number, y: number, font?: Display.FontType): Promise<number | undefined>;
    drawCentreString(string: string, x: number, y: number, font?: Display.FontType): Promise<number | undefined>;
    drawRightString(string: string, x: number, y: number, font?: Display.FontType): Promise<number | undefined>;
    print(str: string): Promise<number | undefined>;
    println(c?: string): Promise<number | undefined>;
    fillScreen(color?: Display.Color): Promise<boolean | undefined>;
    clear(color?: Display.Color): Promise<boolean | undefined>;
    setTextColor(fgcolor: Display.Color, bgcolor?: Display.Color): Promise<boolean | undefined>;
    setTextDatum(datum: Display.TextDatumType): Promise<boolean | undefined>;
    setTextFont(f: Display.FontType): Promise<boolean | undefined>;
    setTextSize(sx: number, sy?: number): Promise<boolean | undefined>;
    setBrightness(brightness: number): Promise<boolean | undefined>;
    getBrightness(): Promise<number | undefined>;
    sleep(): Promise<boolean | undefined>;
    wakeup(): Promise<boolean | undefined>;
    powerSave(flg: boolean): Promise<boolean | undefined>;
    powerSaveOn(): Promise<boolean | undefined>;
    powerSaveOff(): Promise<boolean | undefined>;
    clearDisplay(color?: Display.Color): Promise<boolean | undefined>;
    fontHeight(font?: number): Promise<number | undefined>;
    fontWidth(font?: number): Promise<number | undefined>;
    getBaseColor(): Promise<number | undefined>;
    getColorDepth(): Promise<Display.ColorDepthType | undefined>;
    getCursorX(): Promise<number | undefined>;
    getCursorY(): Promise<number | undefined>;
    getRawColor(): Promise<number | undefined>;
    getRotation(): Promise<number | undefined>;
    getTextDatum(): Promise<Display.TextDatumTypeList | undefined>;
    getTextPadding(): Promise<number | undefined>;
    getTextSizeX(): Promise<number | undefined>;
    getTextSizeY(): Promise<number | undefined>;
    setBaseColor(c: Display.Color): Promise<boolean | undefined>;
    setColor(color: Display.Color): Promise<boolean | undefined>;
    setColorDepth(depth: Display.ColorDepthType): Promise<boolean | undefined>;
    setRawColor(c: Display.Color): Promise<boolean | undefined>;
    setTextPadding(paddingX: number): Promise<boolean | undefined>;
    setTextScroll(scroll: boolean): Promise<boolean | undefined>;
    setTextWrap(wrapX: boolean, wrapY?: boolean): Promise<boolean | undefined>;
    showFont(td?: number): Promise<boolean | undefined>;
    textLength(string: string, width: number): Promise<number | undefined>;
    waitDisplay(): Promise<boolean | undefined>;
    progressBar(x: number, y: number, w: number, h: number, val: number): Promise<boolean | undefined>;
    qrcode(string: string, x?: number, y?: number, width?: number, version?: number): Promise<boolean | undefined>;
    scroll(dx: number, dy: number): Promise<boolean | undefined>;
    setScrollRect(x: number, y: number, w: number, h: number): Promise<boolean | undefined>;
    getScrollRect(): Promise<[number, number, number, number] | undefined>;
    clearScrollRect(): Promise<boolean | undefined>;
    getTextStyle(): Promise<Display.TextStyle | undefined>;
    setTextStyle(textStyle: Display.TextStyle): Promise<boolean | undefined>;
}
declare const FontType: {
    readonly ft_unknown: 1;
    readonly ft_glcd: 2;
    readonly ft_bmp: 3;
    readonly ft_rle: 4;
    readonly ft_gfx: 5;
    readonly ft_bdf: 6;
    readonly ft_vlw: 7;
    readonly ft_u8g2: 8;
    readonly ft_ttf: 9;
};
declare const TextDatumType: {
    readonly top_left: 0;
    readonly top_center: 1;
    readonly top_centre: 1;
    readonly top_right: 2;
    readonly middle_left: 4;
    readonly middle_center: 5;
    readonly middle_centre: 5;
    readonly middle_right: 6;
    readonly bottom_left: 8;
    readonly bottom_center: 9;
    readonly bottom_centre: 9;
    readonly bottom_right: 10;
    readonly baseline_left: 16;
    readonly baseline_center: 17;
    readonly baseline_centre: 17;
    readonly baseline_right: 18;
};
declare const FontTypeList: {
    [key: number]: string;
};
declare const TextDatumTypeList: {
    [key: number]: string;
};
export declare namespace Display {
    type TextStyle = {
        "fore_rgb888"?: number;
        "back_rgb888"?: number;
        "size_x"?: number;
        "size_y"?: number;
        "datum"?: number;
        "padding_x"?: number;
        "utf8"?: boolean;
        "cp437"?: boolean;
    };
    type Color = string | number;
    type ColorDepthType = number;
    type FontType = typeof FontType[keyof typeof FontType];
    type FontTypeList = typeof FontTypeList[keyof typeof FontTypeList];
    type TextDatumType = typeof TextDatumType[keyof typeof TextDatumType];
    type TextDatumTypeList = typeof TextDatumTypeList[keyof typeof TextDatumTypeList];
}
export {};
